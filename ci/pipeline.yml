---
cf-manifest-vars: &cf-manifest-vars
  vars:
    APP_NAME: ((name))
    CDN_DB_NAME: ((cdn_db_name))
    DOMAIN_DB_NAME: ((domain_db_name))

jobs:

- name: reconfigure
  serial: true
  plan:
  - get: src
    params: {depth: 1}
    trigger: true
  - set_pipeline: self
    file: src/ci/pipeline.yml

- name: test
  plan:
  - get: src
    params: {depth: 1}
    trigger: true
    passed: [reconfigure]

  - put: dev-docker-image
    # We push this docker image _only_ so that we can use it in the next task
    # below.  :shrug: concourse.
    params:
      build: src
      dockerfile: src/docker/Dockerfile.dev
      tag_as_latest: true
      cache: true

  - task: test
    # Run the tests using the image pushed above.
    image: dev-docker-image
    config:
      platform: linux
      params:
        TMPDIR: /tmp
      run:
        path: /app/docker/tests

- name: dev
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [test]
    - get: pipeline-tasks
  - put: cf-dev
    params:
      path: src
      manifest: src/manifest.yml
      show_app_log: true
      <<: *cf-manifest-vars
      environment_variables:
        ENV: development
        DNS_ROOT_DOMAIN: ((dev-dns-root-domain))
        DOMAIN_DATABASE_ENCRYPTION_KEY: ((dev-domain-database-encryption-key))
        CDN_DATABASE_ENCRYPTION_KEY: ((dev-cdn-database-encryption-key))
        AWS_COMMERCIAL_REGION: ((dev-aws-commercial-region))
        AWS_COMMERCIAL_ACCESS_KEY_ID: ((dev-aws-commercial-access-key-id))
        AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((dev-aws-commercial-secret-access-key))
        ROUTE53_HOSTED_ZONE_ID: ((dev-route53-hosted-zone-id))
        ALB_HOSTED_ZONE_ID: ((dev-alb-hosted-zone-id))
        CF_USERNAME: ((dev-cf-username))
        CF_PASSWORD: ((dev-cf-password))
        CF_API_ENDPOINT: ((dev-cf-api-endpoint))
        SMTP_HOST: ((smtp-host))
        SMTP_FROM: ((smtp-from))
        SMTP_CERT: ((smtp-cert.certificate))
        SMTP_USER: ((smtp-user))
        SMTP_PASS: ((smtp-pass))
        SMTP_PORT: ((smtp-port))
        SMTP_TO: ((dev-smtp-to))
        MIGRATION_PLAN_ID: ((dev-migration-plan-id))
        CDN_PLAN_ID: ((dev-cdn-plan-id))
        DOMAIN_PLAN_ID: ((dev-domain-plan-id))

  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker-migrator on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-failure-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker-migrator on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-success-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: staging
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [dev]
    - get: pipeline-tasks
  - put: cf-staging
    params:
      path: src
      manifest: src/manifest.yml
      show_app_log: true
      <<: *cf-manifest-vars
      environment_variables:
        ENV: staging
        DNS_ROOT_DOMAIN: ((staging-dns-root-domain))
        DOMAIN_DATABASE_ENCRYPTION_KEY: ((staging-domain-database-encryption-key))
        CDN_DATABASE_ENCRYPTION_KEY: ((staging-cdn-database-encryption-key))
        AWS_COMMERCIAL_REGION: ((staging-aws-commercial-region))
        AWS_COMMERCIAL_ACCESS_KEY_ID: ((staging-aws-commercial-access-key-id))
        AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((staging-aws-commercial-secret-access-key))
        ROUTE53_HOSTED_ZONE_ID: ((staging-route53-hosted-zone-id))
        ALB_HOSTED_ZONE_ID: ((staging-alb-hosted-zone-id))
        CF_USERNAME: ((staging-cf-username))
        CF_PASSWORD: ((staging-cf-password))
        CF_API_ENDPOINT: ((staging-cf-api-endpoint))
        SMTP_HOST: ((smtp-host))
        SMTP_FROM: ((smtp-from))
        SMTP_CERT: ((smtp-cert.certificate))
        SMTP_USER: ((smtp-user))
        SMTP_PASS: ((smtp-pass))
        SMTP_PORT: ((smtp-port))
        SMTP_TO: ((staging-smtp-to))
        MIGRATION_PLAN_ID: ((staging-migration-plan-id))
        CDN_PLAN_ID: ((staging-cdn-plan-id))
        DOMAIN_PLAN_ID: ((staging-domain-plan-id))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker-migrator on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-failure-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker-migrator on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-success-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: production
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [staging]
    - get: pipeline-tasks
  - put: cf-production
    params:
      path: src
      manifest: src/manifest.yml
      show_app_log: true
      <<: *cf-manifest-vars
      environment_variables:
        ENV: production
        DNS_ROOT_DOMAIN: ((production-dns-root-domain))
        DOMAIN_DATABASE_ENCRYPTION_KEY: ((production-domain-database-encryption-key))
        CDN_DATABASE_ENCRYPTION_KEY: ((production-cdn-database-encryption-key))
        AWS_COMMERCIAL_REGION: ((production-aws-commercial-region))
        AWS_COMMERCIAL_ACCESS_KEY_ID: ((production-aws-commercial-access-key-id))
        AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((production-aws-commercial-secret-access-key))
        ROUTE53_HOSTED_ZONE_ID: ((production-route53-hosted-zone-id))
        ALB_HOSTED_ZONE_ID: ((production-alb-hosted-zone-id))
        CF_USERNAME: ((production-cf-username))
        CF_PASSWORD: ((production-cf-password))
        CF_API_ENDPOINT: ((production-cf-api-endpoint))
        SMTP_HOST: ((smtp-host))
        SMTP_FROM: ((smtp-from))
        SMTP_CERT: ((smtp-cert.certificate))
        SMTP_USER: ((smtp-user))
        SMTP_PASS: ((smtp-pass))
        SMTP_PORT: ((smtp-port))
        SMTP_TO: ((production-smtp-to))
        MIGRATION_PLAN_ID: ((production-migration-plan-id))
        CDN_PLAN_ID: ((production-cdn-plan-id))
        DOMAIN_PLAN_ID: ((production-domain-plan-id))

  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker-migrator on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-failure-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker-migrator on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-success-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

############################
#  RESOURCES

resources:

- name: src
  type: git
  icon: github-circle
  check_every: 10s
  source:
    uri: https://github.com/cloud-gov/external-domain-broker-migrator
    branch: main
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: dev-docker-image
  type: docker-image
  icon: docker
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-image-dev))

- name: cf-dev
  type: cf
  icon: cloud-upload
  source:
    api: ((dev-cf-api-endpoint))
    username: ((dev-cf-username))
    password: ((dev-cf-password))
    organization: ((migrator-organization))
    space: ((migrator-space))

- name: cf-staging
  type: cf
  icon: cloud-upload
  source:
    api: ((staging-cf-api-endpoint))
    username: ((staging-cf-username))
    password: ((staging-cf-password))
    organization: ((migrator-organization))
    space: ((migrator-space))

- name: cf-production
  type: cf
  icon: cloud-upload
  source:
    api: ((production-cf-api-endpoint))
    username: ((production-cf-username))
    password: ((production-cf-password))
    organization: ((migrator-organization))
    space: ((migrator-space))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: pipeline-tasks
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cloud-gov/cg-pipeline-tasks
    branch: main
    commit_verification_keys: ((cloud-gov-pgp-keys))


############################
#  RESOURCE TYPES

resource_types:

- name: slack-notification
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: slack-notification-resource
    aws_region: us-gov-west-1
    tag: latest


- name: git
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: git-resource
    aws_region: us-gov-west-1
    tag: latest

- name: cf
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: cf-resource
    aws_region: us-gov-west-1
    tag: latest

- name: registry-image
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: registry-image-resource
    aws_region: us-gov-west-1
    tag: latest
